esphome:
  name: chickenDoor
  friendly_name: Hühnertür

esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: "LzUqh8PFBXjokjgn5qdQmpWKJmxQQH9B0E8zHBRvHrg="

ota:
  password: "654207addb15fb6b3615c91ac7d31de7"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Huhnertur Fallback Hotspot"

captive_portal:
  
web_server:

i2c:
  sda: GPIO21
  scl: GPIO22

#motor output
switch:
    #open door
  - platform: gpio
    pin: GPIO33  
    #name: debug_open_door 
    id: MotorDir0
    interlock: &interlock_group [MotorDir0, MotorDir1]
    interlock_wait_time: 1s


    #close door
  - platform: gpio
    pin: GPIO32
    #name: debug_close_door 
    id: MotorDir1
    interlock: *interlock_group
    interlock_wait_time: 1s

#Limit Switches
binary_sensor:
  #upper limit
  - platform: gpio
    pin: 
      number: GPIO26
      inverted: true
      mode:
        input: true
        pullup: true

    filters:
      - delayed_off: 1000ms

    name: "Tür offen"
    id: door_opend
    device_class: door
    internal: true
    #turn off motor once we hit limit switch
    on_press:
      - lambda: !lambda |-
          id(MotorDir0).turn_off();
          id(MotorDir1).turn_off();

  #lower limit
  - platform: gpio
    pin: 
      number: GPIO25
      inverted: true
      mode:
        input: true
        pullup: true

    filters:
      - delayed_off: 1000ms

    name: "Tür geschlossen"
    id: door_closed
    device_class: door
    #turn off motor once we hit limit switch
    on_press:
      - lambda: !lambda |-
          id(MotorDir0).turn_off();
          id(MotorDir1).turn_off();

button:
  - platform: template
    name: 1. Tür Öffnen
    id: open_door
    on_press:
      - lambda: !lambda |-
          if (!id(door_opend).state) 
          {
            id(MotorDir0).turn_on();
          }          
    
  - platform: template
    name: 2. Tür Schließen
    id: close_door
    on_press:
      - lambda: !lambda |-
          if (!id(door_closed).state) 
          {
            id(MotorDir1).turn_on();
          }

#check every second
time:
  - platform: sntp
    id: my_time
    on_time_sync:
      then:
        # ... and update the RTC when the synchronization was successful
        ds1307.write_time:
    on_time:
      # Jedde Minute
      - seconds: /1
        then:
          lambda: |-
                    //Close door
                    if( id(my_time).now().hour == id(time_close_hour) && 
                        id(my_time).now().minute == id(time_close_minute) && 
                        id(my_time).now().second == 0 &&
                       !id(door_closed).state)
                    {
                      id(MotorDir1).turn_on();
                    }
                    //Open door
                    if( id(my_time).now().hour == id(time_open_hour) && 
                        id(my_time).now().minute == id(time_open_minute) && 
                        id(my_time).now().second == 0 &&
                       !id(door_opend).state)
                    {
                      id(MotorDir0).turn_on();
                    }
        
  - platform: ds1307
    id: my_time2
 


globals:
  - id: time_open_hour
    type: int
    restore_value: true
  - id: time_open_minute
    type: int
    restore_value: true

  - id: time_close_hour
    type: int
    restore_value: true
  - id: time_close_minute
    type: int
    restore_value: true

select:
  # Zeitauswahl Tür öffnen
  - platform: template
    name: "3. Zeit tür öffnen"
    restore_value: true
    optimistic: true
    options:
      - ' 04:00'
      - ' 04:05'
      - ' 04:10'
      - ' 04:15'
      - ' 04:20'
      - ' 04:25'
      - ' 04:30'
      - ' 04:35'
      - ' 04:40'
      - ' 04:45'
      - ' 04:50'
      - ' 04:55'
      - ' 05:00'
      - ' 05:05'
      - ' 05:10'
      - ' 05:15'
      - ' 05:20'
      - ' 05:25'
      - ' 05:30'
      - ' 05:35'
      - ' 05:40'
      - ' 05:45'
      - ' 05:50'
      - ' 05:55'
      - ' 06:00'
      - ' 06:05'
      - ' 06:10'
      - ' 06:15'
      - ' 06:20'
      - ' 06:25'
      - ' 06:30'
      - ' 06:35'
      - ' 06:40'
      - ' 06:45'
      - ' 06:50'
      - ' 06:55'
      - ' 07:00'
      - ' 07:05'
      - ' 07:10'
      - ' 07:15'
      - ' 07:20'
      - ' 07:25'
      - ' 07:30'
      - ' 07:35'
      - ' 07:40'
      - ' 07:45'
      - ' 07:50'
      - ' 07:55'
      - ' 08:00'
      - ' 08:05'
      - ' 08:10'
      - ' 08:15'
      - ' 08:20'
      - ' 08:25'
      - ' 08:30'
      - ' 08:35'
      - ' 08:40'
      - ' 08:45'
      - ' 08:50'
      - ' 08:55'
      - ' 09:00'
    initial_option: ' 05:00'
    # note leading space instead of + for positive offsets - there is an ESPhome bug that stops you using +
    on_value:
      then:
        lambda: |-
          id(time_open_hour) = atoi(x.substr(0,3).c_str());
          id(time_open_minute) = atoi(x.substr(4,2).c_str());
          ESP_LOGD("main", "TZ Hr global value is: %d", id(time_open_hour));
          ESP_LOGD("main", "TZ Min global value is: %d", id(time_open_minute));

  - platform: template
    name: "4. Zeit tür schließen"
    restore_value: true
    optimistic: true
    options:
      - ' 16:00'
      - ' 16:05'
      - ' 16:10'
      - ' 16:15'
      - ' 16:20'
      - ' 16:25'
      - ' 16:30'
      - ' 16:35'
      - ' 16:40'
      - ' 16:45'
      - ' 16:50'
      - ' 16:55'
      - ' 17:00'
      - ' 17:05'
      - ' 17:10'
      - ' 17:15'
      - ' 17:20'
      - ' 17:25'
      - ' 17:30'
      - ' 17:35'
      - ' 17:40'
      - ' 17:45'
      - ' 17:50'
      - ' 17:55'
      - ' 18:00'
      - ' 18:05'
      - ' 18:10'
      - ' 18:15'
      - ' 18:20'
      - ' 18:25'
      - ' 18:30'
      - ' 18:35'
      - ' 18:40'
      - ' 18:45'
      - ' 18:50'
      - ' 18:55'
      - ' 19:00'
      - ' 19:05'
      - ' 19:10'
      - ' 19:15'
      - ' 19:20'
      - ' 19:25'
      - ' 19:30'
      - ' 19:35'
      - ' 19:40'
      - ' 19:45'
      - ' 19:50'
      - ' 19:55'
      - ' 20:00'
      - ' 20:05'
      - ' 20:10'
      - ' 20:15'
      - ' 20:20'
      - ' 20:25'
      - ' 20:30'
      - ' 20:35'
      - ' 20:40'
      - ' 20:45'
      - ' 20:50'
      - ' 20:55'
      - ' 21:00'
      - ' 21:05'
      - ' 21:10'
      - ' 21:15'
      - ' 21:20'
      - ' 21:25'
      - ' 21:30'
      - ' 21:35'
      - ' 21:40'
      - ' 21:45'
      - ' 21:50'
      - ' 21:55'
      - ' 22:00'
      - ' 22:05'
      - ' 22:10'
      - ' 22:15'
      - ' 22:20'
      - ' 22:25'
      - ' 22:30'
      - ' 22:35'
      - ' 22:40'
      - ' 22:45'
      - ' 22:50'
      - ' 22:55'
      - ' 23:00'
    initial_option: ' 16:00'
    # note leading space instead of + for positive offsets - there is an ESPhome bug that stops you using +
    on_value:
      then:
        lambda: |-
          id(time_close_hour) = atoi(x.substr(0,3).c_str());
          id(time_close_minute) = atoi(x.substr(4,2).c_str());
          ESP_LOGD("main", "TZ Hr global value is: %d", id(time_close_hour));
          ESP_LOGD("main", "TZ Min global value is: %d", id(time_close_minute));
